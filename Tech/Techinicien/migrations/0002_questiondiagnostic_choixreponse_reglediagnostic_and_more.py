# Generated by Django 5.2.4 on 2025-08-03 23:22

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('Techinicien', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='QuestionDiagnostic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('type_question', models.CharField(choices=[('choix_unique', 'Choix unique'), ('choix_multiple', 'Choix multiple'), ('texte', 'Texte libre'), ('booleen', 'Oui/Non'), ('echelle', 'Échelle de 1 à 5')], max_length=20)),
                ('ordre', models.PositiveIntegerField(default=0)),
                ('condition_affichage', models.JSONField(blank=True, default=dict, help_text='Conditions pour afficher cette question (format JSON)')),
                ('est_critique', models.BooleanField(default=False, help_text='Question critique pour déterminer la priorit��')),
                ('temps_moyen', models.PositiveIntegerField(default=60, help_text='Temps moyen estimé pour répondre (en secondes)')),
                ('niveau_difficulte', models.CharField(choices=[('facile', 'Facile'), ('moyen', 'Moyen'), ('difficile', 'Difficile')], default='moyen', help_text='Niveau de difficulté de la question', max_length=10)),
                ('tags', models.JSONField(blank=True, default=list, help_text='Tags pour catégoriser la question')),
                ('actif', models.BooleanField(default=True, help_text='Indique si la question est active')),
                ('categorie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions_diagnostic', to='Techinicien.categorie')),
                ('question_parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sous_questions', to='Techinicien.questiondiagnostic')),
            ],
            options={
                'verbose_name': 'Question de diagnostic',
                'verbose_name_plural': 'Questions de diagnostic',
                'ordering': ['ordre'],
            },
        ),
        migrations.CreateModel(
            name='ChoixReponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('texte', models.CharField(max_length=255)),
                ('valeur', models.CharField(max_length=100)),
                ('score_criticite', models.IntegerField(default=0, help_text='Score de criticité (0-10)')),
                ('action_suivante', models.JSONField(blank=True, default=dict, help_text='Action à effectuer après cette réponse')),
                ('ordre', models.PositiveIntegerField(default=0, help_text="Ordre d'affichage des choix")),
                ('couleur', models.CharField(default='#4a6da7', help_text='Couleur du bouton (format hexadécimal)', max_length=7)),
                ('est_par_defaut', models.BooleanField(default=False, help_text='Sélectionné par défaut')),
                ('declenche_suite', models.BooleanField(default=True, help_text='Passe à la question suivante après sélection')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='choix_reponses', to='Techinicien.questiondiagnostic')),
            ],
            options={
                'verbose_name': 'Choix de réponse',
                'verbose_name_plural': 'Choix de réponses',
                'ordering': ['question', 'ordre', 'id'],
            },
        ),
        migrations.CreateModel(
            name='RegleDiagnostic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('type_declencheur', models.CharField(choices=[('reponse', 'Après une réponse'), ('session_debut', 'Au début de la session'), ('session_fin', 'À la fin de la session'), ('changement_etat', "Changement d'état de session")], default='reponse', max_length=20)),
                ('conditions', models.JSONField(help_text='Conditions pour déclencher cette règle (format JSON)')),
                ('type_action', models.CharField(choices=[('afficher_message', 'Afficher un message'), ('changer_etat', "Changer l'état de la session"), ('definir_priorite', 'Définir la priorité'), ('generer_recommandation', 'Générer une recommandation'), ('creer_ticket', 'Créer un ticket'), ('rediriger', 'Rediriger vers une autre question'), ('executer_script', 'Exécuter un script personnalisé')], max_length=30)),
                ('parametres_action', models.JSONField(help_text="Paramètres de l'action (format JSON)")),
                ('priorite', models.PositiveIntegerField(default=0, help_text="Ordre d'exécution des règles (plus le chiffre est bas, plus la règle est prioritaire)")),
                ('est_active', models.BooleanField(default=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_mise_a_jour', models.DateTimeField(auto_now=True)),
                ('derniere_execution', models.DateTimeField(blank=True, null=True)),
                ('dernier_resultat', models.BooleanField(blank=True, null=True)),
                ('dernier_message', models.TextField(blank=True, null=True)),
                ('categorie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='regles_diagnostic', to='Techinicien.categorie')),
                ('question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='regles', to='Techinicien.questiondiagnostic')),
            ],
            options={
                'verbose_name': 'Règle de diagnostic',
                'verbose_name_plural': 'Règles de diagnostic',
                'ordering': ['priorite', 'nom'],
            },
        ),
        migrations.CreateModel(
            name='SessionDiagnostic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statut', models.CharField(choices=[('en_cours', 'En cours'), ('complete', 'Complète'), ('abandonnee', 'Abandonnée'), ('en_pause', 'En pause')], default='en_cours', max_length=20)),
                ('score_criticite_total', models.IntegerField(default=0)),
                ('priorite_estimee', models.CharField(choices=[('faible', 'Faible'), ('normal', 'Normal'), ('urgent', 'Urgent'), ('critique', 'Critique')], default='normal', max_length=10)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_debut', models.DateTimeField(blank=True, null=True)),
                ('date_derniere_activite', models.DateTimeField(auto_now=True)),
                ('date_completion', models.DateTimeField(blank=True, null=True)),
                ('temps_total_passe', models.PositiveIntegerField(default=0, help_text='Temps total passé sur le diagnostic (en secondes)')),
                ('diagnostic_automatique', models.JSONField(blank=True, default=dict)),
                ('recommandations', models.TextField(blank=True)),
                ('score_confiance', models.FloatField(default=1.0, help_text='Score de confiance dans les réponses (0-1)')),
                ('donnees_supplementaires', models.JSONField(blank=True, default=dict, help_text='Données supplémentaires de la session')),
                ('categorie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions_diagnostic', to='Techinicien.categorie')),
                ('equipement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions_diagnostic', to='Techinicien.equipement')),
                ('utilisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions_diagnostic', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Session de diagnostic',
                'verbose_name_plural': 'Sessions de diagnostic',
                'ordering': ['-date_derniere_activite'],
            },
        ),
        migrations.CreateModel(
            name='ReponseDiagnostic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reponse_texte', models.TextField(blank=True)),
                ('score_criticite', models.IntegerField(default=0)),
                ('date_reponse', models.DateTimeField(auto_now_add=True)),
                ('temps_passe', models.PositiveIntegerField(default=0, help_text='Temps passé sur la question (en secondes)')),
                ('est_incertain', models.BooleanField(default=False, help_text="L'utilisateur a indiqué être incertain de sa réponse")),
                ('commentaire', models.TextField(blank=True, help_text='Commentaire facultatif sur la réponse', null=True)),
                ('donnees_supplementaires', models.JSONField(blank=True, default=dict, help_text='Données supplémentaires de la réponse')),
                ('choix_selectionnes', models.ManyToManyField(blank=True, related_name='reponses', to='Techinicien.choixreponse')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reponses', to='Techinicien.questiondiagnostic')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reponses', to='Techinicien.sessiondiagnostic')),
            ],
            options={
                'verbose_name': 'Réponse de diagnostic',
                'verbose_name_plural': 'Réponses de diagnostic',
                'ordering': ['date_reponse'],
            },
        ),
        migrations.CreateModel(
            name='HistoriqueDiagnostic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('debut', 'Début de session'), ('reponse', 'Réponse à une question'), ('reprise', 'Reprise de session'), ('pause', 'Mise en pause'), ('abandon', 'Abandon'), ('completion', 'Diagnostic terminé'), ('recommandation', 'Génération de recommandation'), ('systeme', 'Action système')], max_length=20)),
                ('date_action', models.DateTimeField(auto_now_add=True)),
                ('details', models.JSONField(blank=True, default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('utilisateur', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='historique', to='Techinicien.sessiondiagnostic')),
            ],
            options={
                'verbose_name': "Entrée d'historique de diagnostic",
                'verbose_name_plural': 'Historique des diagnostics',
                'ordering': ['-date_action'],
            },
        ),
        migrations.CreateModel(
            name='DiagnosticSysteme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_diagnostic', models.CharField(choices=[('memoire', 'Mémoire'), ('disque', 'Espace disque'), ('reseau', 'Réseau'), ('cpu', 'Processeur'), ('services', 'Services Windows'), ('logiciels', 'Logiciels installés'), ('securite', 'Sécurité'), ('performance', 'Performances'), ('reseau_avance', 'Analyse réseau avancée'), ('systeme', "Système d'exploitation")], max_length=20)),
                ('resultat', models.JSONField()),
                ('statut', models.CharField(choices=[('ok', 'OK'), ('avertissement', 'Avertissement'), ('erreur', 'Erreur'), ('informatif', 'Informatif')], max_length=20)),
                ('message', models.TextField()),
                ('date_diagnostic', models.DateTimeField(auto_now_add=True)),
                ('duree_execution', models.FloatField(blank=True, help_text="Durée d'exécution en secondes", null=True)),
                ('niveau_impact', models.PositiveIntegerField(default=1, help_text="Niveau d'impact sur le diagnostic global (1-10)")),
                ('balises', models.JSONField(blank=True, default=list, help_text='Balises pour catégoriser le diagnostic')),
                ('recommandation', models.TextField(blank=True, help_text='Recommandation associée à ce diagnostic', null=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diagnostics_systeme', to='Techinicien.sessiondiagnostic')),
            ],
            options={
                'verbose_name': 'Diagnostic système',
                'verbose_name_plural': 'Diagnostics système',
                'ordering': ['-date_diagnostic'],
            },
        ),
        migrations.CreateModel(
            name='TemplateDiagnostic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('est_actif', models.BooleanField(default=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_mise_a_jour', models.DateTimeField(auto_now=True)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('est_lineaire', models.BooleanField(default=True, help_text="Si vrai, les questions sont posées dans l'ordre défini")),
                ('permettre_saut', models.BooleanField(default=True, help_text='Permet de sauter des questions')),
                ('permettre_revenir_arriere', models.BooleanField(default=True, help_text='Permet de revenir aux questions précédentes')),
                ('afficher_progression', models.BooleanField(default=True, help_text='Affiche la barre de progression')),
                ('afficher_temps_estime', models.BooleanField(default=True, help_text='Affiche le temps estimé restant')),
                ('couleur_principale', models.CharField(default='#4a6da7', help_text='Couleur principale du thème (format hexadécimal)', max_length=7)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='diagnostic_templates/logos/')),
                ('auteur', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('categorie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='templates_diagnostic', to='Techinicien.categorie')),
            ],
            options={
                'verbose_name': 'Modèle de diagnostic',
                'verbose_name_plural': 'Modèles de diagnostic',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='TemplateQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordre', models.PositiveIntegerField(default=0)),
                ('condition_affichage', models.JSONField(blank=True, default=dict, help_text='Conditions spécifiques pour ce template (écrase celles de la question)')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='templates', to='Techinicien.questiondiagnostic')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='template_questions', to='Techinicien.templatediagnostic')),
            ],
            options={
                'verbose_name': 'Question du modèle',
                'verbose_name_plural': 'Questions des modèles',
                'ordering': ['template', 'ordre'],
            },
        ),
        migrations.AddField(
            model_name='templatediagnostic',
            name='questions',
            field=models.ManyToManyField(through='Techinicien.TemplateQuestion', to='Techinicien.questiondiagnostic'),
        ),
        migrations.AddIndex(
            model_name='questiondiagnostic',
            index=models.Index(fields=['categorie', 'actif'], name='Techinicien_categor_33ba66_idx'),
        ),
        migrations.AddIndex(
            model_name='questiondiagnostic',
            index=models.Index(fields=['est_critique'], name='Techinicien_est_cri_6740da_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='choixreponse',
            unique_together={('question', 'valeur')},
        ),
        migrations.AddIndex(
            model_name='reglediagnostic',
            index=models.Index(fields=['est_active', 'type_declencheur'], name='Techinicien_est_act_f6a4c0_idx'),
        ),
        migrations.AddIndex(
            model_name='reglediagnostic',
            index=models.Index(fields=['categorie', 'est_active'], name='Techinicien_categor_8420fe_idx'),
        ),
        migrations.AddIndex(
            model_name='sessiondiagnostic',
            index=models.Index(fields=['utilisateur', 'statut'], name='Techinicien_utilisa_fa14bf_idx'),
        ),
        migrations.AddIndex(
            model_name='sessiondiagnostic',
            index=models.Index(fields=['categorie', 'statut'], name='Techinicien_categor_c7fff8_idx'),
        ),
        migrations.AddIndex(
            model_name='sessiondiagnostic',
            index=models.Index(fields=['priorite_estimee'], name='Techinicien_priorit_4ba05d_idx'),
        ),
        migrations.AddIndex(
            model_name='reponsediagnostic',
            index=models.Index(fields=['session', 'question'], name='Techinicien_session_f56378_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='reponsediagnostic',
            unique_together={('session', 'question')},
        ),
        migrations.AddIndex(
            model_name='diagnosticsysteme',
            index=models.Index(fields=['session', 'type_diagnostic'], name='Techinicien_session_b3859b_idx'),
        ),
        migrations.AddIndex(
            model_name='diagnosticsysteme',
            index=models.Index(fields=['statut'], name='Techinicien_statut_e1fe62_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='templatequestion',
            unique_together={('template', 'ordre'), ('template', 'question')},
        ),
    ]
